name: CheckApiVersion

on:
  workflow_dispatch:

jobs:
  ubuntu-latest:
    name: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 'Setup: .NET Core SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: 'Run Version Checker'
        id: version-check
        run: |
          OUTPUT=$(dotnet run -c Release --project ./src/DbdTrickyVersionChecker/DbdTrickyVersionChecker.csproj)
          echo "$OUTPUT"
          # Write sanitized output to GITHUB_OUTPUT
          echo "version-output<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 'Find Existing Issue'
        id: find-issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER=$(gh issue list --limit 1 --search "Bump API version in:title" --json number --jq '.[0].number')
          if [ -n "$ISSUE_NUMBER" ]; then
            echo "issue-number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "issue-number=" >> $GITHUB_OUTPUT
          fi

      - name: 'Update or Create GitHub Issue'
        if: contains(steps.version-check.outputs.version-output, 'New version detected')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_BODY=$(echo "${{ steps.version-check.outputs.version-output }}" | grep 'New version detected')
          echo "$ISSUE_BODY" > issue_body.txt
          if [ -n "${{ steps.find-issue.outputs.issue-number }}" ]; then
            gh issue edit ${{ steps.find-issue.outputs.issue-number }} --body-file issue_body.txt
          else
            gh issue create --title "Bump API version" --body-file issue_body.txt
          fi
